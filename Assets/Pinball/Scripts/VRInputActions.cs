//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Pinball/InputActions/VRInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VRInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VRInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VRInputActions"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""6c02b9df-4ee3-4df4-b0fd-3997afa6234d"",
            ""actions"": [
                {
                    ""name"": ""LFlipper"",
                    ""type"": ""Value"",
                    ""id"": ""89ab98da-77e3-4950-bc7f-9f1f03a9314d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RFlipper"",
                    ""type"": ""Value"",
                    ""id"": ""34095f93-f875-4463-864b-4349cef81a19"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Plunger"",
                    ""type"": ""Button"",
                    ""id"": ""075cb102-f564-4486-8250-7dd73bd7ae35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Joystick"",
                    ""type"": ""Value"",
                    ""id"": ""223de6f9-8abd-462b-8100-d75180030698"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""1046e562-b248-4c21-bb16-a83f3f9528b0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b270f028-a9b4-4ac6-bb79-02edda748ea4"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""LFlipper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99085299-0805-466d-816d-b01ff5b9f0f7"",
                    ""path"": ""<OculusTouchController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""LFlipper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52f4435b-b87b-4fbc-9b2f-ed34cd89498a"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""RFlipper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5423ec89-bc23-498a-a978-371d10c158db"",
                    ""path"": ""<OculusTouchController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""RFlipper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b39d4ee-caa9-461c-b330-a6166f2a2c35"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Plunger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9ce401e-7572-4834-9a77-42c78947a98e"",
                    ""path"": ""<OculusTouchController>/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""Plunger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""153621e5-13a9-4a3a-b20c-3a565e935cd2"",
                    ""path"": ""<OculusTouchController>/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4be033f1-7394-444d-9f77-e2bb4d066dac"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""RightTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""K&M"",
            ""bindingGroup"": ""K&M"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""VR"",
            ""bindingGroup"": ""VR"",
            ""devices"": [
                {
                    ""devicePath"": ""<OpenXRHmd>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<OculusTouchController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<OculusTouchController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_LFlipper = m_Default.FindAction("LFlipper", throwIfNotFound: true);
        m_Default_RFlipper = m_Default.FindAction("RFlipper", throwIfNotFound: true);
        m_Default_Plunger = m_Default.FindAction("Plunger", throwIfNotFound: true);
        m_Default_Joystick = m_Default.FindAction("Joystick", throwIfNotFound: true);
        m_Default_RightTrigger = m_Default.FindAction("RightTrigger", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private IDefaultActions m_DefaultActionsCallbackInterface;
    private readonly InputAction m_Default_LFlipper;
    private readonly InputAction m_Default_RFlipper;
    private readonly InputAction m_Default_Plunger;
    private readonly InputAction m_Default_Joystick;
    private readonly InputAction m_Default_RightTrigger;
    public struct DefaultActions
    {
        private @VRInputActions m_Wrapper;
        public DefaultActions(@VRInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LFlipper => m_Wrapper.m_Default_LFlipper;
        public InputAction @RFlipper => m_Wrapper.m_Default_RFlipper;
        public InputAction @Plunger => m_Wrapper.m_Default_Plunger;
        public InputAction @Joystick => m_Wrapper.m_Default_Joystick;
        public InputAction @RightTrigger => m_Wrapper.m_Default_RightTrigger;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
            {
                @LFlipper.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLFlipper;
                @LFlipper.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLFlipper;
                @LFlipper.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLFlipper;
                @RFlipper.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRFlipper;
                @RFlipper.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRFlipper;
                @RFlipper.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRFlipper;
                @Plunger.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPlunger;
                @Plunger.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPlunger;
                @Plunger.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPlunger;
                @Joystick.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJoystick;
                @Joystick.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJoystick;
                @Joystick.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJoystick;
                @RightTrigger.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightTrigger;
                @RightTrigger.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightTrigger;
                @RightTrigger.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightTrigger;
            }
            m_Wrapper.m_DefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LFlipper.started += instance.OnLFlipper;
                @LFlipper.performed += instance.OnLFlipper;
                @LFlipper.canceled += instance.OnLFlipper;
                @RFlipper.started += instance.OnRFlipper;
                @RFlipper.performed += instance.OnRFlipper;
                @RFlipper.canceled += instance.OnRFlipper;
                @Plunger.started += instance.OnPlunger;
                @Plunger.performed += instance.OnPlunger;
                @Plunger.canceled += instance.OnPlunger;
                @Joystick.started += instance.OnJoystick;
                @Joystick.performed += instance.OnJoystick;
                @Joystick.canceled += instance.OnJoystick;
                @RightTrigger.started += instance.OnRightTrigger;
                @RightTrigger.performed += instance.OnRightTrigger;
                @RightTrigger.canceled += instance.OnRightTrigger;
            }
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    private int m_KMSchemeIndex = -1;
    public InputControlScheme KMScheme
    {
        get
        {
            if (m_KMSchemeIndex == -1) m_KMSchemeIndex = asset.FindControlSchemeIndex("K&M");
            return asset.controlSchemes[m_KMSchemeIndex];
        }
    }
    private int m_VRSchemeIndex = -1;
    public InputControlScheme VRScheme
    {
        get
        {
            if (m_VRSchemeIndex == -1) m_VRSchemeIndex = asset.FindControlSchemeIndex("VR");
            return asset.controlSchemes[m_VRSchemeIndex];
        }
    }
    public interface IDefaultActions
    {
        void OnLFlipper(InputAction.CallbackContext context);
        void OnRFlipper(InputAction.CallbackContext context);
        void OnPlunger(InputAction.CallbackContext context);
        void OnJoystick(InputAction.CallbackContext context);
        void OnRightTrigger(InputAction.CallbackContext context);
    }
}
